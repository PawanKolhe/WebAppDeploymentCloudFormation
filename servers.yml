Description: |
    Pawan Ashish Kolhe / Servers / 
    Created server related resources. Load Balancer, Security Groups, Auto-Scaling Group, etc.

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
        Default: Udacity

    AMI:
        Description: >
            The Machine Image to be used. Please use an Ubuntu Machine Image Specific to your region. Default is set to an AMI
            in the us-west-2 region.
        Type: String
        Default: ami-003634241a8fcdec0

    InstanceType:
        Description: WebServer EC2 instance type
        Type: String
        Default: t3.medium
        ConstraintDescription: Must be a valid EC2 instance type greater than 4GB RAM and 2 CPUs.  

Resources:

    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our load balancer
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our hosts and SSH from local only
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              SourceSecurityGroupId:
                Fn::ImportValue: !Sub "${EnvironmentName}-BastionSecurityGroupID"
              FromPort: 22
              ToPort: 22
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 0
              ToPort: 65535
              CidrIp: 0.0.0.0/0

    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
            SecurityGroups:
            - Ref: LBSecGroup

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        DependsOn: 
            - WebAppLB
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: 
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"

    ALBListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        DependsOn:
            - WebAppLB
            - WebAppTargetGroup
        Properties:
            DefaultActions:
            - Type: forward
              TargetGroupArn: !Ref WebAppTargetGroup
            LoadBalancerArn: !Ref WebAppLB
            Port: '80'
            Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            - Type: forward
              TargetGroupArn: !Ref WebAppTargetGroup
            Conditions:
            - Field: path-pattern
              Values: [/]
            ListenerArn: !Ref ALBListener
            Priority: 1

    UdacityS3ReadOnlyEC2:
        Type: AWS::IAM::Role
        Properties:
            ManagedPolicyArns: 
                - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
                - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement: 
                  - 
                    Effect: "Allow"
                    Principal: 
                        Service: 
                            - "ec2.amazonaws.com"
                    Action: 
                        - "sts:AssumeRole"
            Path: "/"

    InstanceProfilewithRoles:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: "/"
            Roles:
              - !Ref UdacityS3ReadOnlyEC2

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
            - Fn::ImportValue: 
                !Sub "${EnvironmentName}-PRIV-NETS"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: '4'
            MaxSize: '5'
            TargetGroupARNs:
            - Ref: WebAppTargetGroup

    WebServerScaleUpPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
            AdjustmentType: ChangeInCapacity
            AutoScalingGroupName:
                Ref: WebAppGroup
            Cooldown: '60'
            ScalingAdjustment: '1'

    WebServerScaleDownPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
            AdjustmentType: ChangeInCapacity
            AutoScalingGroupName:
                Ref: WebAppGroup
            Cooldown: '60'
            ScalingAdjustment: "-1"

    CPUAlarmHigh:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmDescription: Scale-up if CPU > 90% for 10 minutes
            MetricName: CPUUtilization
            Namespace: AWS/EC2
            Statistic: Average
            Period: '300'
            EvaluationPeriods: '2'
            Threshold: '90'
            AlarmActions:
            - Ref: WebServerScaleUpPolicy
            Dimensions:
            - Name: AutoScalingGroupName
              Value: !Ref WebAppGroup
            ComparisonOperator: GreaterThanThreshold

    CPUAlarmLow:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmDescription: Scale-down if CPU < 70% for 10 minutes
            MetricName: CPUUtilization
            Namespace: AWS/EC2
            Statistic: Average
            Period: '300'
            EvaluationPeriods: '2'
            Threshold: '70'
            AlarmActions:
            - Ref: WebServerScaleDownPolicy
            Dimensions:
            - Name: AutoScalingGroupName
              Value: !Ref WebAppGroup
            ComparisonOperator: LessThanThreshold

    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            IamInstanceProfile: !Ref InstanceProfilewithRoles
            UserData:
                Fn::Base64:
                    Fn::Join:
                    - ''
                    - - "#!/bin/bash \n"
                      - "sudo apt-get update -y \n"
                      - "sudo apt-get install unzip awscli -y \n"
                      - "sudo apt-get install apache2 -y \n"
                      - "sudo systemctl start apache2.service \n"
                      - "cd /var/www/html \n "
                      - "sudo aws s3 cp s3://udacity-demo-1/udacity.zip . \n"
                      - "sudo unzip -o udacity.zip \n"
                      - "/opt/aws/bin/cfn-signal -e $? "
                      - "         --stack "
                      - !Ref AWS::StackName
                      - "         --resource WebServerGroup "
                      - "         --region "
                      - !Ref AWS::Region
                      - "\n"
            ImageId: !Ref AMI
            InstanceType: !Ref InstanceType
            SecurityGroups:
            - Ref: WebServerSecGroup
            BlockDeviceMappings:
            - DeviceName: "/dev/sdk"
              Ebs:
                VolumeSize: '10'
                VolumeType: gp2

Outputs:
  URL:
    Description: The URL of Udagram
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - WebAppLB
          - DNSName